[core]
  # Windows
  autocrlf = input            # Turn off automatic conversion between CRLF (working directory) and LF (repository)
  safecrlf = false            # Don't warn about converting between CRLF and LF
  filemode = false            # Ignore file mode changes (recommended for Windows)
  trustctime = false          # Ignore ctime differences between the index and the working tree
  fsmonitor = true            # Use built-in file system watcher

  # Unix
  # autocrlf = input   # Prevent checking in CRLF files
  # safecrlf = true    # Warn about converting between CRLF and LF
  # filemode = true    # Do not ignore file mode changes (recommended for Mac)

  eol = lf             # Enforce LF line endings

  excludesfile = ~/.gitignore.local  # Add a local ignore file for all repositories

  # Use Notepad++ as default editor
  editor = "'C:/Program Files (x86)/Notepad++/Notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

  # Use delta: https://github.com/dandavison/delta
  pager = delta

  # Use less only if required and keep the output
  # https://superuser.com/questions/1353944/how-to-configure-zsh-with-oh-my-zsh-to-keep-git-history-visible-after-pressing
  # pager = less -FRSX

  # Use plink instead of OpenSSH. An alternative to GIT_SSH environment variable, which can be set per-repository.
  # sshCommand = plink

[color]
  ui = true

[branch]
  # Sort branches by the most recent commit date
  sort = -committerdate

[tag]
  # Use proper version sorting
  sort = version:refname

[diff]
  # Default diff tool
  tool = bc

[difftool "bc"]
  # Beyond Compare
  path = C:/Program Files/Beyond Compare/BComp.exe

  # Mac
  # Run Beyond Compare and Select "Install Command Line Tools" in app menu
  # path = /usr/local/bin/bcomp
  # trustExitCode = true

[difftool "p4merge"]
  # P4Merge
  path = C:/Program Files/Perforce/p4merge.exe

  # Mac
  # path = /Applications/p4merge.app/Contents/MacOS/p4merge


[merge]
  # Default merge tool
  tool = p4merge

[mergetool "bc"]
  # Beyond Compare
  path = C:/Program Files/Beyond Compare/BComp.exe

  # Mac
  # path = /usr/local/bin/bcomp
  # trustExitCode = true

[mergetool "p4merge"]
  # P4Merge
  path = C:/Program Files/Perforce/p4merge.exe

  # Mac
  # path = /Applications/p4merge.app/Contents/MacOS/p4merge

[mergetool]
  keepBackup = false       # Don't create .orig files
  prompt = false           # Don't prompt before each invocation of the merge tool
  trustexitcode = false


[interactive]
  # Delta interactive diff filter
  diffFilter = delta --color-only

[delta]
  features = side-by-side line-numbers   # Delta features
  hunk-header-style = omit               # Hide hunk header
  commit-decoration-style = none         # Don't use any decoration for the commit hash
  file-style = cyan                      # File name style
  file-decoration-style = blue ul        # File decoration, below the file name
  line-numbers-left-style = blue         # Line number line style
  line-numbers-right-style = blue        # Line number line style

[log]
  # Print out ref names on commits by default
  decorate = short

[pretty]
  # Custom log format and colors
  custom = "%Cred%h%Creset -%C(cyan)%d%Creset %s %C(green)(%cr) %Cblue<%an>%Creset"
  quick =  "%Cred%h%Creset -%C(cyan)%d%Creset %s %Cblue<%an>%Creset"
  my = "%Cred%h%Creset -%C(cyan)%d%Creset %s %C(green)(%cr)%Creset"

[fetch]
  prune = true              # Always prune when fetching
  all = true                # Fetch all remotes

[pull]
  # Allow only fast-forward merges when pulling
  ff = only

[push]
  default = simple          # Push mode for centralized workflows
  autoSetupRemote = true    # Push new branches and set upstream tracking automatically
  followTags = true         # Push tags automatically

[merge]
  # Automatically stash/unstash the working directory before/after merging
  autostash = true

[rebase]
  # Automatically stash/unstash the working directory before/after rebases
  autostash = true

  # Enable --autosquash option by default: squash !fixup commits automatically
  autosquash = true

[rerere]
  # Reuse recorded resolution
  enabled = true

[alias]
  # Log
  lg   = log --graph --pretty=my
  lga  = log --graph --pretty=my --all
  q    = log --graph --pretty=my --first-parent -12      # Quick overview

  # My commits in the last 2 weeks
  my = log --graph --pretty=my --author='darekkay' --since=2.weeks

  # Common shortcuts
  aa = add --all
  co = checkout
  cm = checkout master
  cd = checkout develop
  cp = cherry-pick
  mt = mergetool
  rc = rebase --continue
  fa = fetch --all
  pr = pull --rebase
  rl = reset HEAD~1

  # Push and create a remote branch based on the current one (branch → origin/branch)
  ph = push -u origin HEAD

  # Force-push the changes (safer than "-f")
  # It will halt the push operation if someone has pushed to the same branch while you were working on it (and haven’t pulled any changes)
  pf = push --force-with-lease

  # Push current branch to all remotes
  pa = !git remote | xargs -I R git push R
  pushall = !git pa
  paf = !git remote | xargs -I R git push R --force-with-lease

  # Add and commit all changes and new files
  ca = "!f() { git add . && git commit -m \"$1\"; }; f"

  # Interactive rebase for the last x commits
  rb = "!f() { git rebase -i HEAD~\"$1\" --committer-date-is-author-date ; }; f"

  # View the current working tree status using the short format
  s = status -s

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -vv
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Amend the currently staged files to another commit
  fixup = "!f() { git commit --fixup $1 && GIT_SEQUENCE_EDITOR=: git rebase -i --committer-date-is-author-date --autosquash ${1}~1; }; f"

  # Delete all fully-merged branches except master, develop and the current one
  bd = "!f() { git branch | grep -v '^  master$' | grep -v '^  main$' | grep -v '^  develop$' | grep -v ^* | xargs git branch -d; }; f"
  bdf = "!f() { git branch | grep -v '^  master$' | grep -v '^  main$' | grep -v '^  develop$' | grep -v ^* | xargs git branch -D; }; f"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Change the commit and author date to right now
  rewrite-date = "!LC_ALL=C GIT_COMMITTER_DATE=\"$(date)\" git commit --amend --no-edit --date \"$(date)\""

  # Squash all commits. Usage: git squash-all (<commit message>)
  squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-Init repository}\");};f"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Commit count (from HEAD)
  count = !git log --oneline | wc -l

  # Display the status and ahead/behind commits for all local branches and their remotes
  # state = !git for-each-ref --format='%(color:cyan)%(refname:short) %(color:green)%(push:track)' refs/heads && git status -s
  state = !git branch-status && git status -s

  # Commit with a random commit message from whatthecommit.com
  whatthecommit = !git commit --allow-empty -m \"$(curl -s whatthecommit.com/index.txt)\"

  # Party --hard
  party = reset

  # External scripts
  branch-status = !$HOME/bin/git-branch-status
  fetch-tracked = !$HOME/bin/git-fetch-tracked
  fake = !$HOME/bin/git-fake
  changelog = !$HOME/bin/git-changelog
  reset-origin = !$HOME/bin/git-reset-origin
  sync = !$HOME/bin/git-sync
